AWSTemplateFormatVersion: '2010-09-09'

Description: Create resources for the LLMOps workshop

Parameters:

  UserProfileName:
    Type: String
    Description: The user profile name for the SageMaker workshop
    Default: 'SageMakerUser'

  DomainName:
    Type: String
    Description: The domain name of the Sagemaker studio instance
    Default: 'LLMOpsWorkshop'

  EnableOpenSearch:
    Type: String
    Description: Enable OpenSearch
    Default: 'true'
    AllowedValues: 
      - 'true'
      - 'false'

  OpenSearchUsername:
    AllowedPattern: '^[a-zA-Z0-9]+$'
    Default: admin
    Description: User name for the account that will be added to the OpenSearch cluster.
    MaxLength: '25'
    MinLength: '5'
    Type: String

  OpenSearchPassword:
    AllowedPattern: '(?=^.{8,32}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*'
    Description: Password for the account named above. Must be at least 8 characters containing letters, numbers and symbols
    Default: P@ssw0rd!
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String

Mappings: 

  RegionMap: 

    us-east-1: 
      datascience: "arn:aws:sagemaker:us-east-1:081325390199:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:us-east-1:081325390199:image/jupyter-server-3"

    us-east-2:
      datascience: "arn:aws:sagemaker:us-east-2:429704687514:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:us-east-2:429704687514:image/jupyter-server-3"      

    us-west-1: 
      datascience: "arn:aws:sagemaker:us-west-1:742091327244:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:us-west-1:742091327244:image/jupyter-server-3"

    us-west-2: 
      datascience: "arn:aws:sagemaker:us-west-2:236514542706:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:us-west-2:236514542706:image/jupyter-server-3"

    af-south-1:
      datascience: "arn:aws:sagemaker:af-south-1:559312083959:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:af-south-1:559312083959:image/jupyter-server-3"

    ap-east-1:
      datascience: "arn:aws:sagemaker:ap-east-1:493642496378:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:ap-east-1:493642496378:image/jupyter-server-3"

    ap-south-1:
      datascience: "arn:aws:sagemaker:ap-south-1:394103062818:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:ap-south-1:394103062818:image/jupyter-server-3"

    ap-northeast-2:
      datascience: "arn:aws:sagemaker:ap-northeast-2:806072073708:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:ap-northeast-2:806072073708:image/jupyter-server-3"

    ap-southeast-1:
      datascience: "arn:aws:sagemaker:ap-southeast-1:492261229750:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:ap-southeast-1:492261229750:image/jupyter-server-3"

    ap-southeast-2:
      datascience: "arn:aws:sagemaker:ap-southeast-2:452832661640:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:ap-southeast-2:452832661640:image/jupyter-server-3"

    ap-northeast-1: 
      datascience: "arn:aws:sagemaker:ap-northeast-1:102112518831:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:ap-northeast-1:102112518831:image/jupyter-server-3"

    ca-central-1:
      datascience: "arn:aws:sagemaker:ca-central-1:310906938811:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:ca-central-1:310906938811:image/jupyter-server-3"

    eu-central-1: 
      datascience: "arn:aws:sagemaker:eu-central-1:936697816551:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:eu-central-1:936697816551:image/jupyter-server-3"

    eu-west-1:
      datascience: "arn:aws:sagemaker:eu-west-1:470317259841:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:eu-west-1:470317259841:image/jupyter-server-3"

    eu-west-2:
      datascience: "arn:aws:sagemaker:eu-west-2:712779665605:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:eu-west-2:712779665605:image/jupyter-server-3"

    eu-west-3:
      datascience: "arn:aws:sagemaker:eu-west-3:615547856133:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:eu-west-3:615547856133:image/jupyter-server-3"

    eu-north-1:
      datascience: "arn:aws:sagemaker:eu-north-1:243637512696:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:eu-north-1:243637512696:image/jupyter-server-3"

    eu-south-1:
      datascience: "arn:aws:sagemaker:eu-south-1:592751261982:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:eu-south-1:488287956546:image/jupyter-server-3"

    sa-east-1:
      datascience: "arn:aws:sagemaker:sa-east-1:782484402741:image/sagemaker-data-science-310-v1"
      jupyter: "arn:aws:sagemaker:sa-east-1:782484402741:image/jupyter-server-3"

Conditions:
  EnableOpenSearch: !Equals [!Ref EnableOpenSearch, 'true']

Resources:

  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/IAMFullAccess'
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Policies: 
        - PolicyName: s3-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - 
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: arn:aws:s3:::*
        - PolicyName: iam-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - 
                Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:GetRolePolicy
                Resource: '*'
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - 
            Effect: Allow
            Principal: 
              Service: 
                - sagemaker.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSCloudFormationFullAccess'
        - 'arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess'
  
  LambdaExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CloudWatchLogsPermissions
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"
          - Sid: SageMakerDomainPermission
            Effect: Allow
            Action:
              - sagemaker:ListDomains
              - sagemaker:CreateDomain
              - sagemaker:DescribeDomain
              - sagemaker:DeleteDomain
              - sagemaker:UpdateDomain
              - sagemaker:ListUserProfiles
              - sagemaker:CreateUserProfile
              - sagemaker:UpdateUserProfile
              - sagemaker:DeleteUserProfile
              - sagemaker:DescribeUserProfile
              - sagemaker:ListApps
              - sagemaker:CreateApp
              - sagemaker:DescribeApp
              - sagemaker:DeleteApp
              - sagemaker:UpdateApp
            Resource:
              - !Sub "arn:${AWS::Partition}:sagemaker:*:*:domain/*"
              - !Sub "arn:${AWS::Partition}:sagemaker:*:*:user-profile/*"
              - !Sub "arn:${AWS::Partition}:sagemaker:*:*:app/*"
          - Sid: SageMakerProjectsPermission
            Effect: Allow
            Action:
              - servicecatalog:AcceptPortfolioShare
              - sagemaker:EnableSagemakerServicecatalogPortfolio
              - sagemaker:DisableSagemakerServicecatalogPortfolio
            Resource: '*'
          - Sid: ServiceCatalogPermission
            Effect: Allow
            Action:
              - servicecatalog:*
            Resource: '*'
          - Sid: SageMakerExecPassRole
            Effect: Allow
            Action:
              - iam:PassRole
            Resource: !GetAtt  SageMakerExecutionRole.Arn
      Roles:
        - !Ref  LambdaExecutionRole

  DomainDeploymentDelay:
    Type: 'Custom::Delay'
    DependsOn: SageMakerExecutionRole
    Properties:
      ServiceToken: !GetAtt DelayLambda.Arn
      TimeToWait: 300

  DelayLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: "index.handler"
      Timeout: 660
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import time
          def handler(event, context):
            time_to_wait = int(event['ResourceProperties']['TimeToWait'])
            print(f'Waiting for {time_to_wait} seconds')
            time.sleep(time_to_wait)
            print(f'Waiting finished')
            cfnresponse.send(event, context, cfnresponse.SUCCESS, {},'')

  DefaultVpcLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CFGetDefaultVpcId
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse

          ec2 = boto3.client('ec2')

          def lambda_handler(event, context):              
              if 'RequestType' in event and event['RequestType'] == 'Create':
                  vpc_id = get_default_vpc_id()
                  subnets =  get_subnets_for_vpc(vpc_id)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {'VpcId': vpc_id , "Subnets" : subnets}, '')
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {},'')

          def get_default_vpc_id():
              vpcs = ec2.describe_vpcs(Filters=[{'Name': 'is-default', 'Values': ['true']}])
              vpcs = vpcs['Vpcs']
              vpc_id = vpcs[0]['VpcId']
              return vpc_id


          def get_subnets_for_vpc(vpcId):
              response = ec2.describe_subnets(
                  Filters=[
                      {
                          'Name': 'vpc-id',
                          'Values': [vpcId]
                      }
                  ]
              )
              subnet_ids = []
              for subnet in response['Subnets']:
                  subnet_ids.append(subnet['SubnetId'])
              return subnet_ids 
      Description: Return default VPC ID and Subnets
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 5
  DefaultVpcFinder:
    Type: Custom::ResourceForFindingDefaultVpc
    Properties:
      ServiceToken: !GetAtt DefaultVpcLambda.Arn

  StudioDomain:
    Type: AWS::SageMaker::Domain
    DependsOn: DomainDeploymentDelay
    Properties: 
      AppNetworkAccessType: PublicInternetOnly
      AuthMode: IAM
      DefaultUserSettings: 
          ExecutionRole: !GetAtt SageMakerExecutionRole.Arn
      DomainName: !Ref DomainName
      SubnetIds: !GetAtt DefaultVpcFinder.Subnets
      VpcId: !GetAtt DefaultVpcFinder.VpcId

  EnableProjectsLambda:
    Type: AWS::Lambda::Function
    DependsOn: StudioDomain
    Properties:
      FunctionName: CFEnableSagemakerProjects
      Code:
        ZipFile: |
          # Function: CFEnableSagemakerProjects
          # Purpose:  Enables Sagemaker Projects
          import json
          import boto3
          import cfnresponse

          client = boto3.client('sagemaker')
          sc_client = boto3.client('servicecatalog')

          def lambda_handler(event, context):
              response_status = cfnresponse.SUCCESS
              execution_role = event['ResourceProperties']['ExecutionRole']
              
              if 'RequestType' in event and event['RequestType'] == 'Create':
                  enable_projects(execution_role)
              cfnresponse.send(event, context, response_status, {}, '')
              

          def enable_projects(studio_role_arn):
              # enable Project on account level (accepts portfolio share)
              response = client.enable_sagemaker_servicecatalog_portfolio()

              # associate studio role with portfolio
              response = sc_client.list_accepted_portfolio_shares()

              portfolio_id = ''
              for portfolio in response['PortfolioDetails']:
                  if portfolio['ProviderName'] == 'Amazon SageMaker':
                      portfolio_id = portfolio['Id']

              response = sc_client.associate_principal_with_portfolio(
                  PortfolioId=portfolio_id,
                  PrincipalARN=studio_role_arn,
                  PrincipalType='IAM'
              )
      Description: Enable Sagemaker Projects
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 5

  EnableProjects:
    Type: Custom::ResourceForEnablingSageMakerProjects
    Properties:
      ServiceToken: !GetAtt EnableProjectsLambda.Arn
      ExecutionRole: !GetAtt SageMakerExecutionRole.Arn

  UserProfile:
    Type: AWS::SageMaker::UserProfile
    Properties: 
      DomainId: !GetAtt StudioDomain.DomainId
      UserProfileName: !Ref UserProfileName
      UserSettings:
        ExecutionRole: !GetAtt SageMakerExecutionRole.Arn

  JupyterApp:
    Type: AWS::SageMaker::App
    DependsOn:
      - UserProfile
    Properties: 
      AppName: default
      AppType: JupyterServer
      DomainId: !GetAtt StudioDomain.DomainId
      UserProfileName: !Ref UserProfileName
  
  DataScienceApp:
    Type: AWS::SageMaker::App
    DependsOn: UserProfile
    Properties: 
      AppName: instance-event-engine-datascience-ml-t3-medium
      AppType: KernelGateway
      DomainId: !GetAtt StudioDomain.DomainId
      ResourceSpec: 
        InstanceType:  ml.t3.medium
        SageMakerImageArn: !FindInMap
          - RegionMap
          - !Ref 'AWS::Region'
          - datascience
      UserProfileName: !Ref UserProfileName

  OpenSearchSecret:
    Type: AWS::SecretsManager::Secret
    Condition: EnableOpenSearch
    Properties:
      Name: !Sub OpenSearchSecret-${AWS::StackName}
      Description: OpenSearch username and password
      SecretString: !Sub '{ "USERNAME" : "${OpenSearchUsername}", "PASSWORD" : "${OpenSearchPassword}" }'
  
  OpenSearchServiceDomain:
    Type: AWS::OpenSearchService::Domain
    Condition: EnableOpenSearch
    Properties:
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*/*
      EngineVersion: 'OpenSearch_2.5'
      ClusterConfig:
        InstanceType: "r6g.xlarge.search"
      EBSOptions:
        EBSEnabled: True
        VolumeSize: 20
        VolumeType: 'gp3'
      AdvancedSecurityOptions:
        AnonymousAuthEnabled: False
        Enabled: True
        InternalUserDatabaseEnabled: True
        MasterUserOptions:
          MasterUserName: !Sub ${OpenSearchUsername}
          MasterUserPassword: !Sub ${OpenSearchPassword} 
      NodeToNodeEncryptionOptions:
        Enabled: True
      EncryptionAtRestOptions:
        Enabled: True
        KmsKeyId: alias/aws/es
      DomainEndpointOptions:
        EnforceHTTPS: True

Outputs:

  OpenSearchDomainEndpoint:
    Description: OpenSearch domain endpoint
    Condition: EnableOpenSearch
    Value:
      Fn::Join:
      - ''
      - - https://
        - Fn::GetAtt:
          - OpenSearchServiceDomain
          - DomainEndpoint
    
  OpenSearchSecret:
    Description: Name of the OpenSearch secret in Secrets Manager
    Condition: EnableOpenSearch
    Value: !Ref OpenSearchSecret

  SageMakerDomainID:
    Description: SageMaker Studio Domain ID
    Value: !Ref StudioDomain